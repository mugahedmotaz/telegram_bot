// ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู Telegram API
const https = require('https');
require('dotenv').config();

console.log('๐ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู Telegram API...\n');

const BOT_TOKEN = process.env.BOT_TOKEN;

if (!BOT_TOKEN) {
    console.log('โ BOT_TOKEN ุบูุฑ ููุฌูุฏ');
    process.exit(1);
}

// ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุงููุจุงุดุฑ
function testTelegramAPI() {
    return new Promise((resolve, reject) => {
        const url = `https://api.telegram.org/bot${BOT_TOKEN}/getMe`;
        
        console.log('๐ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู Telegram API...');
        
        https.get(url, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(data);
                    if (result.ok) {
                        console.log('โ ุงูุงุชุตุงู ุจู Telegram API ูุฌุญ!');
                        console.log(`๐ค ุงุณู ุงูุจูุช: ${result.result.first_name}`);
                        console.log(`๐ Username: @${result.result.username}`);
                        resolve(result);
                    } else {
                        console.log('โ ุฎุทุฃ ูู Telegram API:', result.description);
                        reject(new Error(result.description));
                    }
                } catch (error) {
                    console.log('โ ุฎุทุฃ ูู ุชุญููู ุงูุงุณุชุฌุงุจุฉ:', error.message);
                    reject(error);
                }
            });
        }).on('error', (error) => {
            console.log('โ ุฎุทุฃ ูู ุงูุดุจูุฉ:', error.message);
            
            if (error.code === 'ENOTFOUND') {
                console.log('\n๐ง ุญููู ููุชุฑุญุฉ:');
                console.log('1. ุชุญูู ูู ุงุชุตุงู ุงูุฅูุชุฑูุช');
                console.log('2. ุชุญูู ูู ุฅุนุฏุงุฏุงุช Firewall');
                console.log('3. ุฌุฑุจ VPN ุฅุฐุง ูุงู Telegram ูุญุฌูุจ');
                console.log('4. ุชุญูู ูู ุฅุนุฏุงุฏุงุช Proxy');
            }
            
            reject(error);
        });
    });
}

// ุงุฎุชุจุงุฑ DNS
function testDNS() {
    return new Promise((resolve, reject) => {
        const dns = require('dns');
        
        console.log('๐ ุงุฎุชุจุงุฑ DNS ูู api.telegram.org...');
        
        dns.lookup('api.telegram.org', (err, address) => {
            if (err) {
                console.log('โ ูุดู ูู ุญู DNS:', err.message);
                reject(err);
            } else {
                console.log(`โ DNS ูุนูู: api.telegram.org -> ${address}`);
                resolve(address);
            }
        });
    });
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑุงุช
async function runTests() {
    try {
        await testDNS();
        await testTelegramAPI();
        
        console.log('\n๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช! ููููู ุชุดุบูู ุงูุจูุช ุงูุขู.');
        
    } catch (error) {
        console.log('\nโ ูุดู ูู ุงูุงุฎุชุจุงุฑ:', error.message);
        console.log('\n๐ง ุญููู ููุชุฑุญุฉ:');
        console.log('1. ุชุญูู ูู ุงุชุตุงู ุงูุฅูุชุฑูุช');
        console.log('2. ุฃุนุฏ ุชุดุบูู ุงูุฑุงูุชุฑ');
        console.log('3. ุฌุฑุจ VPN ูุฎุชูู');
        console.log('4. ุชุญูู ูู Firewall/Antivirus');
        console.log('5. ุฌุฑุจ ุดุจูุฉ ูุฎุชููุฉ (ูุซู ุงููุงุชู ุงููุญููู)');
    }
}

runTests();
